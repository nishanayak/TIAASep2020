Day 3:

First protractor Script:

import { browser, element, by } from "protractor";

describe("Protractor Suite", function() {
   it("Basic Spec", function() {
       browser.get("https://www.angularjs.org/");
       element(by.model('yourName')).sendKeys("Ameya");
       browser.sleep(5000);
       expect(element(by.binding('yourName')).getText()).toEqual('Hello Ameya!');
   }) 
}); 



Day 2 Recap:

- tsc -w (For watching ts files in the folder and converting them to js automatically)
  - How to configure the output directory in tsconfig.json
  
- Typescript 
- Classes
  - Namespaces
  - Constructor
  - Interfaces
    - function with parameter referenced from Interface
    - provided argument of object without creating class
  - Inheritance
    - Examples
  - Export / Import Modules in Typescript / JavaScript
  
  - Jasmine
    - BDD 
      - 3 Practices of BDD
        - Discovery
        - Formulation
        - Automation
      - Jasmine helps with Formulation and Automation
      - Formulation 
        - Way of Describing your examples (Acceptance Criteria) / Acceptance Test Cases / Test Cases in a easily readable /     
          understamdable format
        - Jasmine provides functions to formulate your test cases
          - Describe
          - It
          - Expect
            - Matchers
              - toEqual
              - toBe
              - toNotHaveNull
        - Jasmine Configuration
        - Format of Describe and it
          - describe("", function() { } );
          - it(" ", function() { } );
        
        - Execution Control with Jasmine
          - BeforeEach, AfterEach
          - BeforeAll, AfterAll
          - Execute with filter
            - jasmine --filter="<name of Test Suite or Test Spec>"
        - Data Driven Testing with Jasmine
          - DataProvider
          - Using jasmine-data-provider
            - has to be installed separately
        
  - Protractor
    - Setup
    - Many tries and retries for setup 
    - Protractor CLI
    - WebDriver-Manager - Selenium - Server and Drivers for Chrome and Firefox
      - Download drivers for specifiv version with --versions.chrome argument
    
    - Creating protractor script 
      - Atleast 2 components
        - Spec file (which has the actions - describe - it)
        - Protractor config file
          - Properties like
            - Selenium server address
            - Browser to execute scripts on
            - specify the spec files
        
    
        
          
        
        
  
  
  
  
  
---
Day 2: 
Find the specific version of chromedriver you need by going to this location - 

https://chromedriver.chromium.org/downloads

Run the following command to download the specific version

webdriver-manager update --versions.chrome 83.0.4103.14 
webdriver-manager start --versions.chrome 83.0.4103.14


Day 1 Recap: 

- Client - Server Architecture, Technologies, Programming Languages
- Same technology stack for Client as well as Server side programming (Javascript) 
- What is JavaScript 
  - Makes client pages more interactive, supports external integrations like PDF, images, other files, etc
  - We can now use it for both Frontend and Backend - made possible by platforms like Node.js
  
- Node.js is made of: 
  - 1. Execution engine / Runtime
  - 2. Libraries 
      - Hosted on npm repository
  - NPM 
    - Website
    - Registry
    - CLI
 
 - TypeScript
  - More Robust
  - More OOPS support
  - Additional Libraries
  - Compile time checks
  - Open Sourced by Microsoft
  - Script Type checking (Strictly typed langauge)
  - Cross Platform
  
 - Scripting in TypeScript
  - Variables 
  - Naming of Variables 
  - var and let to initialize variables
  - let is preferred after ES6 or ES2015 
  - Constant
  - Loops (for)
  - Conditions (if)
  - Tuples 
  - Enum
  - ForEach 
    - Uses Fat Arrow or Lambda Expression
  - Functions
    - With Parameters 
        - Optional parameters
        - Default Parameters
        - Rest Parameters ...
      - Without Parameters
    - function(var a, var b): String {
      }
    - anonymous functions
      - (var a, var b) {
        }
    - Arrow Functions
      
    
    
    
  
  
  


